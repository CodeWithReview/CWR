<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="memberMapper">
	<resultMap id="memberResultMap" type="member">
	    <id property="userNo" column="userNo"/>
	    <result property="userId" column="userId"/>
	    <result property="userPwd" column="userPwd"/>
	    <result property="nickName" column="nickName"/>
	    <result property="profileImg" column="profileImg"/>
	    <result property="userInfo" column="userInfo"/>
	    <result property="status" column="status"/>
	    <result property="mento" column="mento"/>
	    <result property="mentoDate" column="mentoDate"/>
	    <result property="disabledDate" column="disabledDate"/>
	    <result property="enrollDate" column="enrollDate"/>
	    <collection property="skill" ofType="java.lang.String">
	        <id property="skill" column="skill"/>
	    </collection>
	</resultMap>



<!-- ==============================  select 구간 ================================ -->

	<!-- ID/PWD 로 멤버 로그인 -->
	<select id="loginByID" parameterType="string" resultType="member">
		SELECT    userNo ,
				  userId ,
				  userPwd ,
				  nickName ,
				  profileImg ,
				  userInfo ,
				  status ,
				  mento ,
				  mentoDate ,
				  disabledDate ,
				  enrollDate
		FROM member
		WHERE userId = #{userId} 
	</select>


	<!-- API로 멤버 로그인 -->
	<select id="loginByApi" parameterType="map" resultType="member">
		SELECT    userNo ,
				  userId ,
				  userPwd ,
				  nickName ,
				  profileImg ,
				  userInfo ,
				  status ,
				  mento ,
				  mentoDate ,
				  disabledDate ,
				  enrollDate
		FROM member
		left join memberapi using(userNo) 
		WHERE apiType = #{ apiType } 
			AND	apiKey = #{ apiKey }
	</select>
	
	<!-- 멤버 정보 조회 -->
	<select id="selectMember" parameterType="int" resultMap="memberResultMap">
		SELECT    userNo ,
				  userId ,
				  userPwd ,
				  nickName ,
				  profileImg ,
				  userInfo ,
				  status ,
				  mento ,
				  mentoDate ,
				  disabledDate ,
				  enrollDate,
				  skill
		FROM member
		left join memberDevelopSkill using(userNo) 
		WHERE userNo = #{ userNo } 
	</select>
	
	<!-- id/nickName 중복확인 -->
	<select id="checkDuplicates" parameterType="map" resultType="int">
		SELECT  count(*)
		FROM member
		<choose>
			<when test='type.equals("id")'>
				WHERE userId = #{ content } 
			</when>
			<when test='type.equals("nickName")'>
				WHERE nickName = #{ content } 
			</when>
		</choose>
	</select>
	
	<!-- id 중복확인 -->
	<select id="idCheck" parameterType="string" resultType="int">
		SELECT  count(*)
		FROM member
		WHERE nickName = #{ nickName } 
	</select>



<!-- =============================== insert 구간  =========================================== -->

	<!-- 유저 생성 -->
	<insert id="insertMember" useGeneratedKeys="true"  keyProperty="userNo" parameterType="member">
		INSERT INTO member ( userId, userPwd, nickName, profileImg, userInfo, status, mento, mentoDate, enrollDate) 
		VALUES (#{ userId }, 
				#{ userPwd }, 
				#{ nickName }, 
				#{ profileImg }, 
				#{ userInfo }, 
				'default' , 
				#{ mento }, 
				now() , 
				now() )
	</insert>

	<!-- 유저가 연동한 api 정보 등록 -->
	<insert id="insertMemberApi" parameterType="memberApi">
		INSERT INTO memberapi ( userNo, apiType, apiKey, apiId ) 
		VALUES (#{ userNo }, 
				#{ apiType }, 
				#{ apiKey }, 
				#{ apiId } )
	</insert>
	
	<!-- 유저별 개발언어 등록 -->
	<insert id="insertMemberSkill" parameterType="map">
		INSERT INTO memberdevelopskill ( userNo , skill ) 
		select skills.*
		from (
		<foreach collection="skillList" item="item" separator="UNION ALL">
				SELECT
					#{userNo} AS userNo ,
					#{item} AS skill 
				FROM DUAL
		</foreach>
		) skills
	</insert>


<!-- ============================== update 구간 ============================== -->


	<!-- 유저 상태 변경 -->
	<update id="updateMemberStatus" parameterType="map">
		UPDATE member
		SET   status = #{ status }
		<choose>
			<when test='status.equals("default")'>
				disabledDate = null
			</when>
			<otherwise>
				disabledDate = now()
			</otherwise>
		</choose>
		WHERE userNo = #{ userNo }
	</update>
	
<!-- 	
	<update id="updateMember" parameterType="member">
		UPDATE member
		SET   userNo = #{  } ,
			  userId = #{  } ,
			  userPwd = #{  } ,
			  nickName = #{  } ,
			  profileImg = #{  } ,
			  userInfo = #{  } ,
			  status = #{  } ,
			  mento = #{  } ,
			  mentoDate = #{  } ,
			  disabledDate = #{  } ,
			  enrollDate = #{  }
		WHERE FORM_NO  = #{formNo}
	</update> -->




<!-- ============================ delete 구간 ============================ -->

	<!-- 유저 삭제 -->
  	<delete id="deleteMember" parameterType="_int">
  		DELETE FROM member
		WHERE userNo = #{ userNo }
  	</delete> 


	<!-- 14일이 지난 탈퇴유저 삭제 -->
  	<delete id="deleteDisabledMember">
  		DELETE FROM member
		WHERE status = 'disabled'
			and now() > DATE_ADD( disabledDate , INTERVAL 14 day)
  	</delete> 




</mapper>